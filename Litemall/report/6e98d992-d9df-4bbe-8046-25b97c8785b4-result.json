{"name": "test_delete", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-c1ca3642=\"\">...</span> is not clickable at point (68, 193). Other element would receive the click: <div class=\"scrollbar-wrapper el-scrollbar__wrap\" style=\"margin-bottom: -17px; margin-right: -17px;\">...</div>\n  (Session info: chrome=103.0.5060.114)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00F66463+2188387]\n\tOrdinal0 [0x00EFE461+1762401]\n\tOrdinal0 [0x00E13D78+802168]\n\tOrdinal0 [0x00E47F9B+1015707]\n\tOrdinal0 [0x00E45F68+1007464]\n\tOrdinal0 [0x00E43C6B+998507]\n\tOrdinal0 [0x00E429D9+993753]\n\tOrdinal0 [0x00E38613+951827]\n\tOrdinal0 [0x00E5C7DC+1099740]\n\tOrdinal0 [0x00E37FF4+950260]\n\tOrdinal0 [0x00E5C9F4+1100276]\n\tOrdinal0 [0x00E6CC22+1166370]\n\tOrdinal0 [0x00E5C5F6+1099254]\n\tOrdinal0 [0x00E36BE0+945120]\n\tOrdinal0 [0x00E37AD6+948950]\n\tGetHandleVerifier [0x012071F2+2712546]\n\tGetHandleVerifier [0x011F886D+2652765]\n\tGetHandleVerifier [0x00FF002A+520730]\n\tGetHandleVerifier [0x00FEEE06+516086]\n\tOrdinal0 [0x00F0468B+1787531]\n\tOrdinal0 [0x00F08E88+1805960]\n\tOrdinal0 [0x00F08F75+1806197]\n\tOrdinal0 [0x00F11DF1+1842673]\n\tBaseThreadInitThunk [0x75AAFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77757A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77757A6E+238]", "trace": "self = <Litemall.TestLitemall.TestLitemall object at 0x000001EDD89D5A80>\n\n    def test_delete(self):\n        self.driver.find_element(By.XPATH, '//*[text()=\"商场管理\"]').click()\n>       self.driver.find_element(By.XPATH, '//*[text()=\"商品类目\"]').click()\n\nTestLitemall.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EDD89D5780>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77757A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77757A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-c1ca3642=\"\">...</span> is not clickable at point (68, 193). Other element would receive the click: <div class=\"scrollbar-wrapper el-scrollbar__wrap\" style=\"margin-bottom: -17px; margin-right: -17px;\">...</div>\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00F66463+2188387]\nE       \tOrdinal0 [0x00EFE461+1762401]\nE       \tOrdinal0 [0x00E13D78+802168]\nE       \tOrdinal0 [0x00E47F9B+1015707]\nE       \tOrdinal0 [0x00E45F68+1007464]\nE       \tOrdinal0 [0x00E43C6B+998507]\nE       \tOrdinal0 [0x00E429D9+993753]\nE       \tOrdinal0 [0x00E38613+951827]\nE       \tOrdinal0 [0x00E5C7DC+1099740]\nE       \tOrdinal0 [0x00E37FF4+950260]\nE       \tOrdinal0 [0x00E5C9F4+1100276]\nE       \tOrdinal0 [0x00E6CC22+1166370]\nE       \tOrdinal0 [0x00E5C5F6+1099254]\nE       \tOrdinal0 [0x00E36BE0+945120]\nE       \tOrdinal0 [0x00E37AD6+948950]\nE       \tGetHandleVerifier [0x012071F2+2712546]\nE       \tGetHandleVerifier [0x011F886D+2652765]\nE       \tGetHandleVerifier [0x00FF002A+520730]\nE       \tGetHandleVerifier [0x00FEEE06+516086]\nE       \tOrdinal0 [0x00F0468B+1787531]\nE       \tOrdinal0 [0x00F08E88+1805960]\nE       \tOrdinal0 [0x00F08F75+1806197]\nE       \tOrdinal0 [0x00F11DF1+1842673]\nE       \tBaseThreadInitThunk [0x75AAFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77757A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77757A6E+238]\n\nC:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "start": 1658315105014, "stop": 1658315106411, "uuid": "8a3a525d-9ad0-4470-a097-0ef324397a45", "historyId": "3c0af994da8ddc82c995cb3d7bea9379", "testCaseId": "d6886915088b4aeda7d7a4a63a0d7dad", "fullName": "TestLitemall.TestLitemall#test_delete", "labels": [{"name": "suite", "value": "TestLitemall"}, {"name": "subSuite", "value": "TestLitemall"}, {"name": "host", "value": "KIKO-Wang"}, {"name": "thread", "value": "17504-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestLitemall"}]}